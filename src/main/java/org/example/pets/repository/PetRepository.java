package org.example.pets.repository;

import org.example.pets.db.ConnectionManager;
import org.example.pets.model.Owner;
import org.example.pets.model.Pet;
import org.example.pets.repository.mapper.PetResultSetMap;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Optional;

public class PetRepository implements Repository<Pet, Integer> {
    private static final String SAVE_PETS_SQL = "insert into pets(name, age, owner_id) values (?,?,?)";

    private static final String UPDATE_BY_ID_SQL = "update pets set name=?, age=?, owner_id=? where id=?";

    private static final String CHECK_BY_ID_SQL = "select id from pets where id=?";

    private static final String DELETE_BY_OWNER_ID_SQL = "delete from pets where owner_id=?";

    private static final String DELETE_BY_ID_SQL = "delete from pets where id = ?";

    private static final String GET_ALL_PETS_SQL = "select m.id as id, "
            + "m.name as name, m.age as age, "
            + "d.id as owner_id, d.name as owner_name "
            + "from pets as m left join owner as d on d.id = m.owner_id " + "order by m.id";

    private static final String GET_ALL_PETS_BY_OWNER_ID_SQL = "select m.id as id, "
            + "m.name as name, m.age as age, "
            + "d.id as owner_id, d.name as owner_name "
            + "from pets as m left join owner as d on d.id = m.owner_id where d.id=? order by m.id";

    private static final String GET_PETS_BY_NAME_SQL = "select p.id as id, "
            + "p.name as name, p.age as age, "
            + "o.id as owner_id, o.name as owner_name "
            + "from pets as p left join owner as o on o.id = p.owner_id "
            + "where p.name = ?";

    private static final String GET_PETS_BY_ID_SQL = "select m.id as id, "
            + "m.name as name, m.age as age, "
            + "d.id as owner_id, d.name as owner_name "
            + "from pets as m left join owner as d on d.id = m.owner_id " + "where m.id = ?";

    private static final String INIT_TABLE_PETS_SQL = """
            create table if not exists pets (
            id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            name varchar UNIQUE NOT NULL,
            age int NOT NULL,
            owner_id int NOT NULL)
            """;

    private final PetResultSetMap petResultSetMap;
    private ConnectionManager connectionManager;
    private Repository<Owner, Integer> ownerRepository;

    public PetRepository() {
        this.petResultSetMap = new PetResultSetMap();
    }

    public ConnectionManager getConnectionManager() {
        return connectionManager;
    }

    @Override
    public void setConnectionManager(ConnectionManager connectionManager) {
        this.connectionManager = connectionManager;
    }

    public Repository<Owner, Integer> getOwnerRepository() {
        return ownerRepository;
    }

    public void setOwnerRepository(Repository<Owner, Integer> ownerRepository) {
        this.ownerRepository = ownerRepository;
    }

    @Override
    public Pet save(Pet pet) {
        Optional<Pet> petDB = findByName(pet.getName());

        if (petDB.isPresent()) {
            return petDB.get();
        }

        Owner owner = pet.getOwner();
        Owner ownerDB;

        if (owner.getName() != null) {
            ownerDB = ownerRepository.save(owner);

            if (owner.getId() != null && !owner.getId().equals(ownerDB.getId())) {
                throw new RuntimeException("У хозяина другое имя с таким id");
            }
        } else {
            ownerDB = ownerRepository.findById(owner.getId()).orElseThrow(
                    () -> new RuntimeException("Хозяина с таким id нет")
            );
        }

        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(SAVE_PETS_SQL, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, pet.getName());
            statement.setInt(2, pet.getAge());
            statement.setInt(3, ownerDB.getId());
            statement.executeUpdate();

            ResultSet resultSet = statement.getGeneratedKeys();

            if (resultSet.next()) {
                Integer petId = resultSet.getInt("id");
                pet.setId(petId);
            }

            pet.setOwner(ownerDB);

            return pet;
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }


    @Override
    public List<Pet> findAll() {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_ALL_PETS_SQL);
             ResultSet resultSet = statement.executeQuery()) {

            return petResultSetMap.map(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public Optional<Pet> findById(Integer id) {
        try (Connection connection = getConnectionManager().getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_PETS_BY_ID_SQL)) {
            statement.setInt(1, id);

            ResultSet resultSet = statement.executeQuery();
            List<Pet> pets = petResultSetMap.map(resultSet);

            if (pets.isEmpty()) {
                return Optional.empty();
            }

            return Optional.of(pets.getFirst());
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public boolean deleteById(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(DELETE_BY_ID_SQL)) {
            statement.setInt(1, id);

            return statement.executeUpdate() == 1;
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    public boolean deleteByOwnerID(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(DELETE_BY_OWNER_ID_SQL)) {
            statement.setInt(1, id);

            return statement.executeUpdate() > 0;
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public Optional<Pet> update(Pet pet) {
        if (!isPresentWithId(pet.getId())) {
            throw new RuntimeException("Питомца не существует с таким id");
        }

        Owner owner = pet.getOwner();

        if (owner.getId() != null) {
            Owner ownerInDb = ownerRepository.findById(owner.getId()).orElseThrow(
                    () -> new RuntimeException("Хозяина не существует с таким id"));

            if (owner.getName() == null) {
                owner.setName(ownerInDb.getName());
            } else {
                if (!ownerInDb.getName().equals(owner.getName())) {
                    throw new RuntimeException("У хозяина другое имя с таким id: "
                            + ownerInDb.getName() + ", но на входе: " + owner.getName());
                }
            }
        }

        if (owner.getName() != null && owner.getId() == null) {
            owner = ownerRepository.save(owner);
            pet.setOwner(owner);
        }

        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(UPDATE_BY_ID_SQL)) {
            statement.setString(1, pet.getName());
            statement.setInt(2, pet.getAge());
            statement.setInt(3, owner.getId());
            statement.setInt(4, pet.getId());
            statement.executeUpdate();

            return Optional.of(pet);
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    public List<Pet> findByOwnerId(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_ALL_PETS_BY_OWNER_ID_SQL)) {
            statement.setInt(1, id);

            return petResultSetMap.map(statement.executeQuery());
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public void initDB() {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(INIT_TABLE_PETS_SQL)) {
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }

    }

    public boolean isPresentWithId(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(CHECK_BY_ID_SQL)) {
            statement.setInt(1, id);
            ResultSet resultSet = statement.executeQuery();

            return resultSet.next();
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    private Optional<Pet> findByName(String name) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_PETS_BY_NAME_SQL)) {
            statement.setString(1, name);

            ResultSet resultSet = statement.executeQuery();
            List<Pet> pets = petResultSetMap.map(resultSet);

            if (pets.isEmpty()) {
                return Optional.empty();
            }

            return Optional.of(pets.getFirst());
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }
}
