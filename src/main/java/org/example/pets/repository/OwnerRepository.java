package org.example.pets.repository;

import org.example.pets.db.ConnectionManager;
import org.example.pets.model.Owner;
import org.example.pets.model.Pet;
import org.example.pets.repository.mapper.OwnerResultSetMap;
import org.example.pets.repository.mapper.PetResultSetMap;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Optional;

public class OwnerRepository implements Repository<Owner, Integer> {
    private static final String GET_ALL_SQL = "select id, name from owner";

    private static final String GET_BY_ID_SQL = "select id, name from owner where id = ?";

    private static final String SAVE_SQL = "insert into owner(name) values (?)";

    private static final String GET_BY_NAME_SQL = "select id, name from owner where name = ?";

    private static final String UPDATE_BY_ID_SQL = "update owner set name=? where id=?";

    private static final String DELETE_BY_ID_SQL = "delete from owner where id = ?";

    private static final String DELETE_PETS_BY_OWNER_ID_SQL = "delete from pets where owner_id=?";

    private static final String CHECK_BY_ID_SQL = "select id from owner where id=?";

    private static final String GET_ALL_PETS_BY_OWNER_ID_SQL = """
            select m.id as id,
            m.name as name, m.age as age,
            d.id as owner_id, d.name as owner_name
            from pets as m left join owner as d on d.id = m.owner_id
            where d.id=? order by m.id
            """;

    private static final String TABLE_CREATION_SQL = """
            create table if not exists owner (
            id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            name varchar UNIQUE NOT NULL)
            """;

    private final OwnerResultSetMap ownerResultSetMap;
    private final PetResultSetMap petResultSetMap;
    private ConnectionManager connectionManager;

    public OwnerRepository() {
        ownerResultSetMap = new OwnerResultSetMap();
        petResultSetMap = new PetResultSetMap();
    }

    public ConnectionManager getConnectionManager() {
        return connectionManager;
    }

    @Override
    public void setConnectionManager(ConnectionManager connectionManager) {
        this.connectionManager = connectionManager;
    }

    @Override
    public Owner save(Owner owner) {
        String ownerName = owner.getName();
        Optional<Owner> ownerDB = findByName(ownerName);

        if (ownerDB.isPresent()) {
            return ownerDB.get();
        }

        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(SAVE_SQL, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, ownerName);
            statement.executeUpdate();

            ResultSet resultSet = statement.getGeneratedKeys();

            if (resultSet.next()) {
                owner.setId(resultSet.getInt("id"));
            }

            return owner;
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public List<Owner> findAll() {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_ALL_SQL);
             ResultSet resultSet = statement.executeQuery()) {

            return ownerResultSetMap.map(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public Optional<Owner> findById(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_BY_ID_SQL)) {
            statement.setInt(1, id);

            ResultSet resultSet = statement.executeQuery();
            List<Owner> owners = ownerResultSetMap.map(resultSet);

            if (owners.isEmpty()) {
                return Optional.empty();
            }

            Owner owner = owners.getFirst();
            owner.setPets(findPetsByOwnerId(id));

            return Optional.of(owner);
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public boolean deleteById(Integer id) {
        try {
            return deleteByIdSupporting(id);
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    @Override
    public Optional<Owner> update(Owner owner) {
        if (!isPresentWithId(owner.getId())) {
            throw new RuntimeException("Питомца с таким id не существует");
        }

        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(UPDATE_BY_ID_SQL)) {
            statement.setString(1, owner.getName());
            statement.setInt(2, owner.getId());
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }

        return findById(owner.getId());
    }

    @Override
    public void initDB() {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(TABLE_CREATION_SQL)) {
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    private Optional<Owner> findByName(String ownerName) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_BY_NAME_SQL)) {
            statement.setString(1, ownerName);

            ResultSet resultSet = statement.executeQuery();
            List<Owner> owners = ownerResultSetMap.map(resultSet);

            return owners.isEmpty() ? Optional.empty() : Optional.of(owners.getFirst());
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    private List<Pet> findPetsByOwnerId(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(GET_ALL_PETS_BY_OWNER_ID_SQL)) {
            statement.setInt(1, id);

            return petResultSetMap.map(statement.executeQuery());
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    private boolean deleteByIdSupporting(Integer id) throws SQLException {
        Connection connection = null;

        try {
            connection = connectionManager.getConnection();

            return deleteOwnerAndPets(id, connection);
        } catch (Exception e) {
            if (connection != null) {
                connection.rollback();
            }

            throw e;
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

    private boolean deleteOwnerAndPets(Integer id, Connection connection) throws SQLException {
        try (PreparedStatement ownerDel = connection.prepareStatement(DELETE_BY_ID_SQL);
             PreparedStatement petDel = connection.prepareStatement(DELETE_PETS_BY_OWNER_ID_SQL)) {
            connection.setAutoCommit(false);
            ownerDel.setInt(1, id);
            petDel.setInt(1, id);
            petDel.executeUpdate();

            int linesDeleted = ownerDel.executeUpdate();
            connection.commit();
            connection.setAutoCommit(true);

            return linesDeleted > 0;
        }
    }

    private boolean isPresentWithId(Integer id) {
        try (Connection connection = connectionManager.getConnection();
             PreparedStatement statement = connection.prepareStatement(CHECK_BY_ID_SQL)) {
            statement.setInt(1, id);
            ResultSet resultSet = statement.executeQuery();

            return resultSet.next();
        } catch (SQLException e) {
            throw new RuntimeException(e.getMessage());
        }
    }
}
